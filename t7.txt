<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Time Management App</title>
    
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        html, body {
            width: 100%;
            height: 100%;
            overflow: hidden;
        }

        body {
            background: linear-gradient(45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradientAnimation 15s ease infinite;
            font-family: Arial, sans-serif;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }
        
        @keyframes gradientAnimation {
            0% {background-position: 0% 50%;}
            50% {background-position: 100% 50%;}
            100% {background-position: 0% 50%;}
        }

        .container {
            width: 100%;
            max-width: 100%;
            margin: 0 auto;
            overflow-y: auto;
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

        .container::-webkit-scrollbar {
            display: none;
        }

        form, #tasks, #timer {
            width: 100%;
            margin-bottom: 20px;
        }

        .quadrant {
            padding: 10px;
            margin-bottom: 20px;
            border-radius: 10px;
            width: 100%;
            overflow-wrap: break-word;
            word-wrap: break-word;
            hyphens: auto;
        }

        #urgent-important {
            background: rgba(255, 0, 0, 0.7);
        }

        #important-noturgent {
            background: rgba(0, 0, 255, 0.7);
        }

        #urgent-notimportant {
            background: rgba(0, 255, 0, 0.7);
        }

        #noturgent-notimportant {
            background: rgba(255, 255, 0, 0.7);
        }

        .task {
            display: flex;
            align-items: center;
            flex-wrap: wrap;
            margin-bottom: 10px;
            width: 100%;
        }

        .task label {
            margin-right: 10px;
            word-break: break-word;
            flex-grow: 1;
        }

        .checkbox-label {
            display: flex;
            align-items: flex-start;
            flex-grow: 1;
            flex-wrap: wrap;
            width: 100%;
        }

        .delete-button {
            background-color: red;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 5px 10px;
            margin-right: 10px;
            cursor: pointer;
        }

        h2 {
            color: navy;
            margin-bottom: 10px;
        }

        .btn {
            padding: 10px 20px;
            margin: 5px;
            font-size: 16px;
            cursor: pointer;
            border: none;
            border-radius: 50%;
            color: white;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: background-color 0.3s ease, transform 0.2s ease;
            width: 50px;
            height: 50px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        .btn-increase {
            background-color: #000080;
        }
        .btn-decrease {
            background-color: #f44336;
        }
        .btn:hover {
            transform: translateY(-2px);
        }
        .btn:active {
            transform: translateY(1px);
        }

        input[type="text"], input[type="number"], select {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
        }

        #addTask {
            width: 100%;
            padding: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        #addTask:hover {
            background-color: #45a049;
        }

        @media (max-width: 600px) {
            body {
                padding: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <button class="btn btn-increase" onclick="resizePage(1.1)">+</button>
        <button class="btn btn-decrease" onclick="resizePage(0.9)">-</button>

        <h2>Ensure the task entered is in the right priority setting:</h2>

        <p><a href="t72.html">Go to weekly/monthly view </a></p>
        <audio id="backgroundAudio" src="whitenoise.mp3" loop></audio>
        <form>
            <label for="username">Enter your email id:</label><br>
            <input type="text" id="username"><br><br>
            <button type="button" id="login">Login</button>
        </form>
        <br>
        <form id="taskForm" style="display:none;">
            <label for="todo">To-Do List:</label><br>
            <input type="text" id="todo"><br><br>
            <label for="priority">Priority (Urgent/Important):</label><br>
            <select id="priority">
                <option value="urgent-important">Urgent/Important</option>
                <option value="important-noturgent">Important/Not Urgent</option>
                <option value="urgent-notimportant">Urgent/Not Important</option>
                <option value="noturgent-notimportant">Not Urgent/Not Important</option>
            </select><br><br>
            <label for="time">Estimated Time(minutes):</label><br>
            <input type="number" id="time"> <br><br>
            <label for="workTime">Work Time (minutes):</label><br>
            <input type="number" id="workTime" value="25"><br><br>
            <label for="breakTime">Break Time (minutes):</label><br>
            <input type="number" id="breakTime" value="5"><br><br>
            <button type="button" id="addTask">Add Task</button>
        </form>
        <br>
        
        <img src="vid.gif" width="100" height="100">

        <div id="tasks">
            <h2>Tasks:</h2>
            <div class="quadrant" id="urgent-important">
                <h3>Urgent/Important</h3>
            </div>
            <div class="quadrant" id="important-noturgent">
                <h3>Important/Not Urgent</h3>
            </div>
            <div class="quadrant" id="urgent-notimportant">
                <h3>Urgent/Not Important</h3>
            </div>
            <div class="quadrant" id="noturgent-notimportant">
                <h3>Not Urgent/Not Important</h3>
            </div>
        </div>
            
        <div id="timer">
            <h2>Timer:</h2>
            <p id="timerText">00:00</p>
            <button id="startTimer">Start Timer</button>
            <button id="resetTimer">Reset Timer</button>
        </div>
    </div>
        
    <script>
        let scale = 1;

        function resizePage(factor) {
            scale *= factor;
            document.body.style.zoom = scale;
            localStorage.setItem('zoomLevel', scale);
        }

        document.addEventListener("DOMContentLoaded", function() {
            let currentUser = localStorage.getItem("currentUser");
            scale = parseFloat(localStorage.getItem('zoomLevel')) || 1;
            document.body.style.zoom = scale;

            if (currentUser) {
                document.getElementById("username").value = currentUser;
                loadTasks(currentUser);
                document.getElementById("taskForm").style.display = "block";
            }

            document.getElementById("login").addEventListener("click", function() {
                currentUser = document.getElementById("username").value;
                if (currentUser) {
                    localStorage.setItem("currentUser", currentUser);
                    loadTasks(currentUser);
                    document.getElementById("taskForm").style.display = "block";
                } else {
                    alert("Please enter a username.");
                }
            });

            document.getElementById("addTask").addEventListener("click", function() {
                const task = document.getElementById("todo").value;
                const priority = document.getElementById("priority").value;
                const estimatedTime = document.getElementById("time").value;

                if (task && estimatedTime) {
                    addTaskToUI(currentUser, task, priority, estimatedTime);
                    saveTask(currentUser, task, priority, estimatedTime);

                    document.getElementById("todo").value = "";
                    document.getElementById("time").value = "";
                } else {
                    alert("Please fill out both the task and estimated time.");
                }
            });

            let interval;
            let timeLeft;
            let isBreak = false;

            function startTimer() {
                if (!interval) {
                    let workTime = parseInt(document.getElementById("workTime").value) || 25;
                    let breakTime = parseInt(document.getElementById("breakTime").value) || 5;
                    timeLeft = workTime * 60;
                    interval = setInterval(updateTimer, 1000);
                    document.getElementById("backgroundAudio").play();
                }
            }

            function updateTimer() {
                if (timeLeft > 0) {
                    let minutes = Math.floor(timeLeft / 60);
                    let seconds = timeLeft % 60;
                    document.getElementById("timerText").textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
                    timeLeft--;
                } else {
                    clearInterval(interval);
                    interval = null;
                    if (isBreak) {
                        ;
                        isBreak = false;
                        timeLeft = (parseInt(document.getElementById("workTime").value) || 25) * 60;
                        document.getElementById("backgroundAudio").play();
                    } else {
                        ;
                        isBreak = true;
                        timeLeft = (parseInt(document.getElementById("breakTime").value) || 5) * 60;
                        document.getElementById("backgroundAudio").pause();
                    }
                    interval = setInterval(updateTimer, 1000);
                }
            }

            function resetTimer() {
                clearInterval(interval);
                interval = null;
                document.getElementById("timerText").textContent = "00:00";
                document.getElementById("backgroundAudio").pause();
                document.getElementById("backgroundAudio").currentTime = 0;
            }

            document.getElementById("startTimer").addEventListener("click", startTimer);
            document.getElementById("resetTimer").addEventListener("click", resetTimer);

            function saveTask(user, task, priority, estimatedTime, isChecked = false) {
                let tasks = JSON.parse(localStorage.getItem(user)) || [];
                tasks.push({ task, priority, estimatedTime, isChecked });
                localStorage.setItem(user, JSON.stringify(tasks));
            }

            function loadTasks(user) {
                let tasks = JSON.parse(localStorage.getItem(user)) || [];
                tasks.forEach(function(taskObj) {
                    const { task, priority, estimatedTime, isChecked } = taskObj;
                    addTaskToUI(user, task, priority, estimatedTime, isChecked);
                });
            }

            function addTaskToUI(user, task, priority, estimatedTime, isChecked = false) {
                const taskContainer = document.createElement("div");
                taskContainer.classList.add("task");
                const label = document.createElement("label");
                label.textContent = `${task} - Priority: ${priority} - Estimated Time: ${estimatedTime} minutes`;

                const checkbox = document.createElement("input");
                checkbox.setAttribute("type", "checkbox");
                checkbox.checked = isChecked;

                checkbox.addEventListener("change", function() {
                    updateTaskStatus(user, task, priority, estimatedTime, this.checked);
                });

                const checkboxLabel = document.createElement("label");
                checkboxLabel.classList.add("checkbox-label");
                checkboxLabel.appendChild(checkbox);
                checkboxLabel.appendChild(label);

                const deleteButton = document.createElement("button");
                deleteButton.classList.add("delete-button");
                deleteButton.textContent = "Delete";

                deleteButton.addEventListener("click", function() {
                    taskContainer.remove();
                    deleteTask(user, task, priority, estimatedTime);
                });

                taskContainer.appendChild(deleteButton);
                taskContainer.appendChild(checkboxLabel);

                let taskList = document.getElementById(priority);
                taskList.appendChild(taskContainer);
            }

            function deleteTask(user, task, priority, estimatedTime) {
                let tasks = JSON.parse(localStorage.getItem(user)) || [];
                tasks = tasks.filter(t => t.task !== task || t.priority !== priority || t.estimatedTime !== estimatedTime);
                localStorage.setItem(user, JSON.stringify(tasks));
            }

            function updateTaskStatus(user, task, priority, estimatedTime, isChecked) {
                let tasks = JSON.parse(localStorage.getItem(user)) || [];
                const taskIndex = tasks.findIndex(t => t.task === task && t.priority === priority && t.estimatedTime === estimatedTime);
                if (taskIndex !== -1) {
                    tasks[taskIndex].isChecked = isChecked;
                    localStorage.setItem(user, JSON.stringify(tasks));
                }
            }
        });
    </script>
</body>
</html>
